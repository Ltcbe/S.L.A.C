# --- frontend/Dockerfile (Debian slim + Babel, Ã©coute sur PORT=3001) ---
FROM node:20-bullseye-slim AS deps
WORKDIR /app
COPY package.json package-lock.json* ./
# npm ci si lockfile prÃ©sent ; sinon fallback npm install
RUN if [ -f package-lock.json ]; then npm ci; else npm install --no-audit --fund=false --progress=false; fi

FROM node:20-bullseye-slim AS builder
WORKDIR /app
ENV NEXT_TELEMETRY_DISABLED=1
# Si le runner est limitÃ© en RAM, dÃ©commente :
# ENV NODE_OPTIONS="--max-old-space-size=512"
COPY --from=deps /app/node_modules ./node_modules
COPY . .
RUN npm run build

FROM node:20-bullseye-slim AS runner
WORKDIR /app
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
# ðŸ‘‰ Change le port dâ€™Ã©coute interne Ã  3001 pour Ã©viter tout conflit
ENV PORT=3001
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/public ./public
COPY --from=builder /app/package.json ./package.json
# Expose le port interne 3001 (pas de binding hÃ´te ici)
EXPOSE 3001
# DÃ©marre Next sur le port $PORT
CMD ["sh", "-lc", "npm start -p ${PORT}"]
